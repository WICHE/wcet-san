<?php

/**
 * Use this file to override Drupal's default HTML output
 *
 * 1. Preprocess hooks
 * 2. Theme suggestions
 * 3. Utility functions
 */

use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\block\Entity\Block;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Views;
use Drupal\Core\Url;
use Drupal\Core\Link;

//*********************************************
// 1. Preprocess hooks
//*********************************************

/**
 * Implements template_preprocess_node().
 */
function themekit_preprocess_node(&$variables) {
  // Set our own node type preprocess, drupal creates them by default, but seems to only run hook_preprocess_node__event
  // on event full pages, not event teasers as well
  $node = $variables['node'];
  if (!empty($node) && is_object($node) && method_exists($node, 'getType')) {
    //ensure that the node variable exists and is an object
    $function = __FUNCTION__ . '_' . $node->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
}


/**
 * Implements template_preprocess_page().
 */
function themekit_preprocess_page(&$variables) {
}

/**
 * Implements template_preprocess_field().
 */
function themekit_preprocess_field(&$variables) {

  $variables['label'];
  $d=0;

  if ($variables['field_name'] == 'field_resource_type') {

    $resource_type = $variables['element']['#object']->get('field_resource_type');

    $termId = $resource_type->target_id;
    $variables['resourceId'] = 'resource-id-' . $termId;
    $variables['name'] = Term::load($termId)->get('name')->value;
  }

  if ($variables['field_name'] == 'field_event_type') {
    $event_type = $variables['element']['#object']->get('field_event_type');

    $termId = $event_type->target_id;
    $variables['eventId'] = 'event-id-' . $termId;
    $variables['name'] = Term::load($termId)->get('name')->value;
  }

  if ($variables['field_name'] == 'field_file') {

    // Get File URL for twig template
    $file = $variables['element']['#object'];
    $file_entity = $file->field_file->entity;
    $file_uri = $file_entity->getFileUri();
    $variables['file_url'] = file_create_url($file_uri);

    // Get File Parent Entity Name for twig template
    $file_name = $file->name->value;
    $variables['file_name'] = $file_name;

  }

}

/**
 * Implements template_preprocess_node_article().
 */
function themekit_preprocess_node_article(&$variables) {
}


/**
 * Implements template_preprocess_media().
 */
function themekit_preprocess_media__svg(&$variables) {

  if (!empty($variables['content']['field_svg'])) {
    $svg_file_entity = $variables['content']['field_svg']['0']['#file'];
    if (is_object($svg_file_entity) && method_exists($svg_file_entity, 'getFileUri')) {
      $variables['svg_url'] = file_create_url($svg_file_entity->getFileUri());
    }
  }
}

/**
 * Paragraphs preprocess.
 */
function themekit_preprocess_paragraph(&$variables) {
  // Set our own paragraphs type preprocess, drupal creates them by default, but they seem
  // to only run hook_preprocess_paragraph__simple_content on default view mode,
  // not additional view modes as well
  if (!empty($variables['paragraph']) && is_object($variables['paragraph']) && method_exists($variables['paragraph'], 'getType')) {
    //ensure that the node variable exists and is an object
    $function = __FUNCTION__ . '_' . $variables['paragraph']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }

  $paragraph = $variables['paragraph'];
  $bundle = $paragraph->bundle();

  switch ($bundle) {
    case 'summary_events':
    case 'summary_past_events':
    case 'summary_resources':
      $view_id = 'events';
      $view_display = 'block_upcoming_events';

      if ($bundle === 'summary_resources') {
        $view_id = 'resources';
        $view_display = 'block_latest_resources';
      }

      if ($bundle === 'summary_past_events') {
        $view_id = 'events';
        $view_display = 'block_past_events';
      }

      $tids = [];
      if (!$paragraph->get('field_summary_topics')->isEmpty()) {
        foreach ($paragraph->get('field_summary_topics') as $topic) {
          $tids[] = $topic->target_id;
        }
      }

      $variables['view'] = [
        '#type' => 'view',
        '#name' => $view_id,
        '#display_id' => $view_display,
        '#arguments' => $tids,
      ];


      break;
    case 'compound_header_content':
//      $uri = $paragraph->field_media_image->entity->field_image->entity->getFileUri();
//      $variables['banner_bg'] = $uri;
      break;

  }


}

function themekit_preprocess_paragraph_simple_content(&$variables) {
  // Example hook for paragraph type
}


function themekit_preprocess_paragraph_single_image(&$variables) {
  /* @var $paragraph Drupal\paragraphs\Entity\Paragraph */
  $paragraph = $variables['paragraph'];

  $parent = $paragraph->getParentEntity();
  if ($paragraph->getEntityTypeId() === 'paragraph') {
    switch ($parent->getType()) {
      case 'layout_two_column':
        $uri = $paragraph->field_media_image->entity->field_image->entity->getFileUri();
        $variables['column_image'] = [
          '#theme' => 'image_style',
          '#style_name' => 'column_image',
          '#uri' => $uri,
        ];
        break;
      case 'compound_header_content':
        $uri = $paragraph->field_media_image->entity->field_image->entity->getFileUri();
        $variables['column_image'] = [
          '#theme' => 'image_style',
          '#style_name' => 'column_image',
          '#uri' => $uri,
        ];
        $variables['banner-bg'] = $uri;
//        $d=0;
        break;
    }
  }
}

/**
 * Implements template_preprocess_file_link().
 */
function themekit_preprocess_file_link(&$variables) {
  $file = $variables['file'];
  $options = array();

  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);
  $url = file_create_url($file_entity->getFileUri());
  $mime_type = $file->getMimeType();
  $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();
  if (empty($variables['description'])) {
    // Set title
    $parent_media = $file->_referringItem->getEntity();
    $parent_paragraph = '';
    if (!empty($parent_media->_referringItem)) {
      $parent_paragraph = $parent_media->_referringItem->getEntity();
    }
    if ($parent_paragraph && $parent_paragraph->hasField('field_header') && !$parent_paragraph->get('field_header')->isEmpty()) {
      $link_text = $parent_paragraph->get('field_header')->value;
    } else {
      $link_text = $file_entity->getFilename();
    }
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $file_entity->getFilename();
  }
  // Set target attribute to open the file in a new window
  $options['attributes']['target'] = '_blank';
  $variables['link'] = Link::fromTextAndUrl($link_text, Url::fromUri($url, $options));
}

//*********************************************
// 2. Theme suggestions
//*********************************************

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $field_name = !empty($variables['element']['#field_name']) ? $variables['element']['#field_name'] : '';
  $type = !empty($variables['element']['#entity_type']) ? $variables['element']['#entity_type'] : '';
  $bundle = !empty($variables['element']['#bundle']) ? $variables['element']['#bundle'] : '';
  $is_paragraph = ($type == 'paragraph');
  $object = !empty($variables['element']['#object']) ? $variables['element']['#object'] : '';

  // Apply theme suggestions based on field name.
  switch($field_name) {
    case 'field_p_content':
    case 'field_p_header':
      // Remove all field markup so only the field value markup is output.
      array_unshift($suggestions, 'field__no_wrapper');
      break;
    case 'field_p_column':
    case 'field_p_secondary_content':
      // Remove field item wrappers.
      array_unshift($suggestions, 'field__reset');
      break;
  }

  // Apply theme suggestions for "field_header" based on paragraph bundle.
  if ($field_name == 'field_header' && $is_paragraph) {
    switch($bundle) {
      case 'compound_header_content':
        if (!empty($object) && !$object->get('field_subheader_as_h1')->value) {
          array_unshift($suggestions, 'field__heading_1');
        }
        break;
      case 'simple_content':
        array_unshift($suggestions, 'field__heading_2');
        break;
    }
  }

  // Apply theme suggestions for "field_subheader" based on paragraph bundle.
  if ($field_name == 'field_subheader' && $is_paragraph) {
    switch($bundle) {
      case 'compound_header_content':
        if (!empty($object) && $object->get('field_subheader_as_h1')->value) {
          array_unshift($suggestions, 'field__heading_1');
        }
        break;
    }
  }

  switch ($type) {
    case 'contact_message':
      $suggestions[] = 'field__' . $type;
      $suggestions[] = 'field__' . $type . '__' . $variables['element']['#field_type'];
      break;
  }
}

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

//*********************************************
// 3. Utility functions
//*********************************************

/**
 * Utility function to get the inline css style for a background image.
 *
 * @param $entity
 *  Entity containing the image field.
 * @param $field_name
 *  Name of the image field to use.
 * @param $image_style
 *  Name of the image style to use.
 * @return string
 *  Full css style attribute containing background image.
 */
function themekit_get_entity_image_inline_style($entity, $field_name, $image_style = null) {
  $rendered_style = '';

  if (!$entity->$field_name->isEmpty()) {
    $file_entity = $entity->get($field_name)->entity->get('field_image')->entity;

    if ($url = themekit_get_image_style_url($file_entity, $image_style)) {
      $rendered_style = 'style="background-image: url(' . $url . ');"';
    }
  }

  return $rendered_style;
}

/**
 * Get the url for a specific image style of an image.
 *
 * @param File $file
 *  Image to be used.
 * @param $image_style
 *  Name of the image style to use.
 * @return string
 */
function themekit_get_image_style_url(File $file, $image_style) {
  $uri = $file->getFileUri();
  if ($image_style) {
    $url = ImageStyle::load($image_style)->buildUrl($uri);
  } else {
    $url = file_create_url($uri);
  }
  return $url;
}


/**
 * Get a renderable array from a block ID
 *
 * @param $block_id
 * @param null $weight
 *  Optional weight parameter, useful if you are dumping this into a region and need to negotiate its position
 * @return array
 */
function themekit_block_to_renderable_array($block_id, $weight = null) {
  $block = Block::load($block_id);
  if (is_null($block)) return [];
  $block_content = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);

  // set weight
  if (isset($weight)) {
    $block_content['#weight'] = $weight;
  }

  return $block_content;
}


/**
 * Utility function to create a renderable array from a view
 *
 * @param $view_id
 *  The view machine name id
 * @param $view_display
 *  The display machine name id
 * @param null $view_title
 *  Optionally add the view title
 *
 * @return mixed
 *  The view as a renderable array
 */
function themekit_view_to_renderable_array($view_id, $view_display, $view_title = null) {
  // set title
  $view = Views::getView($view_id);
  $view->setDisplay($view_display);

  if (isset($view_title)) {
    $view_content['title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => $view->getTitle(),
      '#attributes' => [
        'class' => 'view-title',
      ],
    ];
  }
  $view_content['content'] = views_embed_view($view_id, $view_display);

  return $view_content;
}